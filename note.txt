        Node.js RESTful API

Understanding RESTful APIs

REST (Representational State Transfer) is an architectural style for designing networked applications that has become the standard for web services.

RESTful APIs provide a flexible, lightweight way to integrate applications and enable communication between different systems.
 Core Concepts:
- Resources: Everything is a resource (user, product, order)
- Representations: Resources can have multiple representations (JSON, XML, etc.)
- Stateless: Each request contains all necessary information
- Uniform Interface: Consistent way to access and manipulate resources

RESTful APIs use HTTP requests to perform CRUD operations (Create, Read, Update, Delete) on resources, which are represented as URLs.

REST is stateless, meaning each request from a client to a server must contain all the information needed to understand and process the request.

** Unlike SOAP or RPC or RPC, REST is not a protocol but an architectural style that leverages existing web standards like HTTP, URL JSON, and XML.

__________________________________________________________________________

Core REST Principles

Understanding these principles is curcial for designing effective RESTful APIs.
THey ensure your APII is scalable, maintainable, and easy to use.

KEY PRINCIPLES IN PRACTICE
- Resourse-Based: Focus on resources rather than actions
- Stateless: Each request is independent and self-contained
- Cacheable: Responses define their cacheability
- Uniform Interface: Consistent resource identification and manipulation
- Layered System: Client doesn;t need to know about the underlying architecture

The core principles of REST architecture include:
1. Client-Server Architecture: Separation of concerns between the client and the server
2. Statelessness: No client context is stored on the serveer between requests
3. Cacheability: Responses must define themselves as cacheable or non-cacheable
4. Layered System: A client cannot tell whether it is connected directly to the end server
5. Uniform Interface: Resources are identified in requests, resources are manipulated through representations, self-descriptive messages, and HATEOAS (Hypertext As The Engine Of Application State)

__________________________________________________________________________

            HTTP Methods and Their Usage
RESTful APIs use standard HTTP methods to perform operations on resources.

Each method has specific semantics and should be used appropriately.

Idempotency and Safety:

- Safe Methods: GET, HEAD, OPTIONS (should not modify resources)
- Idempotent Methods: GET, PUT, DELETE (multiple identical requests = same effect as one)
- Non-Idempotent: POST, PATCH (may have different effects with multiple calls)

Always use the most specific method that matches your operation's intent.


Method	        Action	                        Example
GET	            Retrieve resource(s)        	GET /api/users
POST        	Create a new resource       	POST /api/users
PUT         	Update a resource completely	PUT /api/users/123
PATCH       	Update a resource partially	    PATCH /api/users/123
DELETE      	Delete a resource	            DELETE /api/users/123

